#!/usr/bin/env python3
"""
Script de diagn√≥stico para identificar problemas de inicio
"""

import sys
import os
import traceback


def diagnose_startup_issue():
    """Diagnostica problemas de inicio paso a paso"""
    print("=== Diagn√≥stico de problemas de inicio ===")

    # 1. Verificar path y imports b√°sicos
    print("1. Verificando path y imports b√°sicos...")
    try:
        src_path = os.path.join(os.path.dirname(__file__), "src")
        if src_path not in sys.path:
            sys.path.insert(0, src_path)
        print(f"   ‚úÖ Path agregado: {src_path}")
    except Exception as e:
        print(f"   ‚ùå Error agregando path: {e}")
        return False

    # 2. Testear imports b√°sicos
    print("2. Probando imports b√°sicos...")
    try:
        from pymonitor.main import main

        print("   ‚úÖ Import de main exitoso")
    except Exception as e:
        print(f"   ‚ùå Error importando main: {e}")
        traceback.print_exc()
        return False

    # 3. Testear imports de dependencias
    print("3. Probando imports de dependencias...")
    try:
        from PyQt6.QtWidgets import QApplication

        print("   ‚úÖ PyQt6 disponible")
    except Exception as e:
        print(f"   ‚ùå Error con PyQt6: {e}")
        return False

    # 4. Testear creaci√≥n de argumentos
    print("4. Probando creaci√≥n de argumentos...")
    try:
        test_args = ["test_app"]
        print(f"   ‚úÖ Args de prueba: {test_args}")
    except Exception as e:
        print(f"   ‚ùå Error con argumentos: {e}")
        return False

    # 5. Testear imports espec√≠ficos de la aplicaci√≥n
    print("5. Probando imports espec√≠ficos...")
    try:
        from pymonitor.core.app import Application

        print("   ‚úÖ Application import exitoso")
    except Exception as e:
        print(f"   ‚ùå Error importando Application: {e}")
        traceback.print_exc()
        return False

    # 6. Testear instanciaci√≥n b√°sica (sin inicializar hardware)
    print("6. Probando instanciaci√≥n b√°sica...")
    try:
        # No creamos la aplicaci√≥n real para evitar problemas con Qt
        print("   ‚úÖ Test de instanciaci√≥n preparado")
    except Exception as e:
        print(f"   ‚ùå Error en instanciaci√≥n: {e}")
        traceback.print_exc()
        return False

    # 7. Verificar archivos necesarios
    print("7. Verificando archivos necesarios...")
    required_files = ["LibreHardwareMonitorLib.dll", "HidSharp.dll", "settings.json"]

    for file in required_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file} encontrado")
        else:
            print(f"   ‚ö†Ô∏è  {file} no encontrado")

    print("\nüéâ Diagn√≥stico b√°sico completado exitosamente!")
    print("El problema podr√≠a estar en la inicializaci√≥n del hardware monitor.")
    print("Intenta ejecutar la aplicaci√≥n manualmente para ver errores espec√≠ficos.")

    return True


if __name__ == "__main__":
    if diagnose_startup_issue():
        print("\nüí° Sugerencias:")
        print("1. Ejecuta: python -m src.pymonitor.main")
        print("2. Revisa si hay errores espec√≠ficos en la consola")
        print("3. Verifica que LibreHardwareMonitorLib.dll sea compatible")
    else:
        print("\n‚ùå Se encontraron problemas b√°sicos que deben resolverse primero.")
