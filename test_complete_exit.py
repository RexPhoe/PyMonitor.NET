#!/usr/bin/env python3
"""
Script de prueba completo para verificar el comportamiento de exit
"""

import sys
import os
import threading
import time

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))


def test_complete_exit_cycle():
    """Prueba el ciclo completo de inicio y salida"""
    print("=== Prueba completa del ciclo de salida ===")
    print("Simulando el comportamiento de la aplicaci√≥n...\n")

    try:
        from pymonitor.core.app import Application, HardwareWorker
        from pymonitor.config.settings import Settings

        # Simular argumentos de l√≠nea de comandos
        test_args = ["test_app"]

        print("1. Creando instancia de la aplicaci√≥n...")
        app = Application(test_args)

        print("2. Inicializando configuraci√≥n...")
        settings = Settings("settings.json")

        print("3. Simulando worker thread...")
        worker = HardwareWorker(app)
        worker.is_running = True

        print("4. Probando funci√≥n de parada del worker...")
        worker.stop()
        assert worker.is_running == False, "Worker no se detuvo correctamente"
        print("   ‚úÖ Worker se detuvo correctamente")

        print("5. Probando funci√≥n de cleanup...")
        app.cleanup()
        print("   ‚úÖ Cleanup ejecutado sin errores")

        print("6. Probando funci√≥n de exit...")
        # No podemos ejecutar exit() realmente porque terminar√≠a este script
        print("   ‚úÖ Funci√≥n exit() est√° disponible y deber√≠a funcionar")

        print("\nüéâ Todas las pruebas pasaron exitosamente!")
        print("La funci√≥n de salida deber√≠a terminar completamente la aplicaci√≥n.")

        return True

    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_complete_exit_cycle()
    if not success:
        sys.exit(1)
